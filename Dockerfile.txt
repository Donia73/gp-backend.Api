# Stage 1: Build the projects
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build-env
WORKDIR /app

# Copy the .csproj files and restore as distinct layers
COPY ./AuthenticationServer.Api/AuthenticationServer.Api.csproj ./AuthenticationServer.Api/
COPY ./gp-backend.Api/gp-backend.Api.csproj ./gp-backend.Api/
COPY ./gp-backend.Core/gp-backend.Core.csproj ./gp-backend.Core/
COPY ./gp-backend.EF/gp-backend.EF.csproj ./gp-backend.EF/

RUN dotnet restore ./AuthenticationServer.Api/AuthenticationServer.Api.csproj
RUN dotnet restore ./gp-backend.Api/gp-backend.Api.csproj

# Copy the remaining files and build
COPY . ./
RUN dotnet publish ./AuthenticationServer.Api/AuthenticationServer.Api.csproj -c Release -o /app/publish
RUN dotnet publish ./gp-backend.Api/gp-backend.Api.csproj -c Release -o /app/publish

# Stage 2: Build the runtime image
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime
WORKDIR /app
COPY --from=build-env /app/publish .

# Set the startup command for the Docker container
ENTRYPOINT ["dotnet", "gp-backend.Api.dll"]

# Expose the port that the WebAPI will listen on
EXPOSE 80
